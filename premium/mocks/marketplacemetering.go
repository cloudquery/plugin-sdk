// Code generated by MockGen. DO NOT EDIT.
// Source: usage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	marketplacemetering "github.com/aws/aws-sdk-go-v2/service/marketplacemetering"
	auth "github.com/cloudquery/cloudquery-api-go/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockAWSMarketplaceClientInterface is a mock of AWSMarketplaceClientInterface interface.
type MockAWSMarketplaceClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAWSMarketplaceClientInterfaceMockRecorder
}

// MockAWSMarketplaceClientInterfaceMockRecorder is the mock recorder for MockAWSMarketplaceClientInterface.
type MockAWSMarketplaceClientInterfaceMockRecorder struct {
	mock *MockAWSMarketplaceClientInterface
}

// NewMockAWSMarketplaceClientInterface creates a new mock instance.
func NewMockAWSMarketplaceClientInterface(ctrl *gomock.Controller) *MockAWSMarketplaceClientInterface {
	mock := &MockAWSMarketplaceClientInterface{ctrl: ctrl}
	mock.recorder = &MockAWSMarketplaceClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSMarketplaceClientInterface) EXPECT() *MockAWSMarketplaceClientInterfaceMockRecorder {
	return m.recorder
}

// MeterUsage mocks base method.
func (m *MockAWSMarketplaceClientInterface) MeterUsage(ctx context.Context, params *marketplacemetering.MeterUsageInput, optFns ...func(*marketplacemetering.Options)) (*marketplacemetering.MeterUsageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MeterUsage", varargs...)
	ret0, _ := ret[0].(*marketplacemetering.MeterUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MeterUsage indicates an expected call of MeterUsage.
func (mr *MockAWSMarketplaceClientInterfaceMockRecorder) MeterUsage(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeterUsage", reflect.TypeOf((*MockAWSMarketplaceClientInterface)(nil).MeterUsage), varargs...)
}

// MockTokenClient is a mock of TokenClient interface.
type MockTokenClient struct {
	ctrl     *gomock.Controller
	recorder *MockTokenClientMockRecorder
}

// MockTokenClientMockRecorder is the mock recorder for MockTokenClient.
type MockTokenClientMockRecorder struct {
	mock *MockTokenClient
}

// NewMockTokenClient creates a new mock instance.
func NewMockTokenClient(ctrl *gomock.Controller) *MockTokenClient {
	mock := &MockTokenClient{ctrl: ctrl}
	mock.recorder = &MockTokenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenClient) EXPECT() *MockTokenClientMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockTokenClient) GetToken() (auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenClientMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenClient)(nil).GetToken))
}

// GetTokenType mocks base method.
func (m *MockTokenClient) GetTokenType() auth.TokenType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenType")
	ret0, _ := ret[0].(auth.TokenType)
	return ret0
}

// GetTokenType indicates an expected call of GetTokenType.
func (mr *MockTokenClientMockRecorder) GetTokenType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenType", reflect.TypeOf((*MockTokenClient)(nil).GetTokenType))
}

// MockQuotaMonitor is a mock of QuotaMonitor interface.
type MockQuotaMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockQuotaMonitorMockRecorder
}

// MockQuotaMonitorMockRecorder is the mock recorder for MockQuotaMonitor.
type MockQuotaMonitorMockRecorder struct {
	mock *MockQuotaMonitor
}

// NewMockQuotaMonitor creates a new mock instance.
func NewMockQuotaMonitor(ctrl *gomock.Controller) *MockQuotaMonitor {
	mock := &MockQuotaMonitor{ctrl: ctrl}
	mock.recorder = &MockQuotaMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotaMonitor) EXPECT() *MockQuotaMonitorMockRecorder {
	return m.recorder
}

// HasQuota mocks base method.
func (m *MockQuotaMonitor) HasQuota(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasQuota", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasQuota indicates an expected call of HasQuota.
func (mr *MockQuotaMonitorMockRecorder) HasQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasQuota", reflect.TypeOf((*MockQuotaMonitor)(nil).HasQuota), arg0)
}

// TeamName mocks base method.
func (m *MockQuotaMonitor) TeamName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TeamName indicates an expected call of TeamName.
func (mr *MockQuotaMonitorMockRecorder) TeamName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamName", reflect.TypeOf((*MockQuotaMonitor)(nil).TeamName))
}

// MockUsageClient is a mock of UsageClient interface.
type MockUsageClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsageClientMockRecorder
}

// MockUsageClientMockRecorder is the mock recorder for MockUsageClient.
type MockUsageClientMockRecorder struct {
	mock *MockUsageClient
}

// NewMockUsageClient creates a new mock instance.
func NewMockUsageClient(ctrl *gomock.Controller) *MockUsageClient {
	mock := &MockUsageClient{ctrl: ctrl}
	mock.recorder = &MockUsageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsageClient) EXPECT() *MockUsageClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUsageClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUsageClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUsageClient)(nil).Close))
}

// HasQuota mocks base method.
func (m *MockUsageClient) HasQuota(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasQuota", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasQuota indicates an expected call of HasQuota.
func (mr *MockUsageClientMockRecorder) HasQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasQuota", reflect.TypeOf((*MockUsageClient)(nil).HasQuota), arg0)
}

// Increase mocks base method.
func (m *MockUsageClient) Increase(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increase indicates an expected call of Increase.
func (mr *MockUsageClientMockRecorder) Increase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increase", reflect.TypeOf((*MockUsageClient)(nil).Increase), arg0)
}

// IncreaseForTable mocks base method.
func (m *MockUsageClient) IncreaseForTable(arg0 string, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseForTable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseForTable indicates an expected call of IncreaseForTable.
func (mr *MockUsageClientMockRecorder) IncreaseForTable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseForTable", reflect.TypeOf((*MockUsageClient)(nil).IncreaseForTable), arg0, arg1)
}

// TeamName mocks base method.
func (m *MockUsageClient) TeamName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TeamName indicates an expected call of TeamName.
func (mr *MockUsageClientMockRecorder) TeamName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamName", reflect.TypeOf((*MockUsageClient)(nil).TeamName))
}
