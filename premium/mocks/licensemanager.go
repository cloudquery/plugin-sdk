// Code generated by MockGen. DO NOT EDIT.
// Source: offline.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	licensemanager "github.com/aws/aws-sdk-go-v2/service/licensemanager"
	gomock "github.com/golang/mock/gomock"
)

// MockAWSLicenseManagerInterface is a mock of AWSLicenseManagerInterface interface.
type MockAWSLicenseManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAWSLicenseManagerInterfaceMockRecorder
}

// MockAWSLicenseManagerInterfaceMockRecorder is the mock recorder for MockAWSLicenseManagerInterface.
type MockAWSLicenseManagerInterfaceMockRecorder struct {
	mock *MockAWSLicenseManagerInterface
}

// NewMockAWSLicenseManagerInterface creates a new mock instance.
func NewMockAWSLicenseManagerInterface(ctrl *gomock.Controller) *MockAWSLicenseManagerInterface {
	mock := &MockAWSLicenseManagerInterface{ctrl: ctrl}
	mock.recorder = &MockAWSLicenseManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSLicenseManagerInterface) EXPECT() *MockAWSLicenseManagerInterfaceMockRecorder {
	return m.recorder
}

// CheckoutLicense mocks base method.
func (m *MockAWSLicenseManagerInterface) CheckoutLicense(ctx context.Context, params *licensemanager.CheckoutLicenseInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CheckoutLicenseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckoutLicense", varargs...)
	ret0, _ := ret[0].(*licensemanager.CheckoutLicenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckoutLicense indicates an expected call of CheckoutLicense.
func (mr *MockAWSLicenseManagerInterfaceMockRecorder) CheckoutLicense(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutLicense", reflect.TypeOf((*MockAWSLicenseManagerInterface)(nil).CheckoutLicense), varargs...)
}
